

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>imLZH1' Blog</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2025-01-08T14:25:41+08:00</updated>
  <author>
    <name>imLZH1</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2025 imLZH1 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>IrisCTF2025-Pwn-Binary-Exploitation-WriteUps</title>
    <link href="http://localhost:4000/posts/IrisCTF2025-Pwn-Binary-Exploitation-WriteUps/" rel="alternate" type="text/html" title="IrisCTF2025-Pwn-Binary-Exploitation-WriteUps" />
    <published>2025-01-07T00:00:00+08:00</published>
  
    <updated>2025-01-07T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/IrisCTF2025-Pwn-Binary-Exploitation-WriteUps/</id>
    <content src="http://localhost:4000/posts/IrisCTF2025-Pwn-Binary-Exploitation-WriteUps/" />
    <author>
      <name>imLZH1</name>
    </author>

  
    
  

  
    <summary>
      





      
  This IrisCTF2025 binary vulnerability exploitation report was written by imLZH1, a member of the “Just For the Questions” team


sqlate
int main(void) {
  
	......

    init_admin();
    login_anonymous();
	......
	do{
		......
        switch (c) {
          	......
            case '5': {
                printf("Registration is currently closed.\n\n");
                action_login();
      ...
    </summary>
  

  </entry>

  
  <entry>
    <title>2024-BRISC-CTF-Pwn-WriteUps</title>
    <link href="http://localhost:4000/posts/BRISC-CTF/" rel="alternate" type="text/html" title="2024-BRISC-CTF-Pwn-WriteUps" />
    <published>2025-01-07T00:00:00+08:00</published>
  
    <updated>2025-01-07T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/BRISC-CTF/</id>
    <content src="http://localhost:4000/posts/BRISC-CTF/" />
    <author>
      <name>imLZH1</name>
    </author>

  
    
  

  
    <summary>
      





      hard-physler-kernel
非预期做法


  权限没设置好，全部都时 rwx


​​

把 /bin/busybox 文件覆盖，然后 exit

​​


  exploit


#include "minilib.h"

extern void _start(){
    char *files[] = {
        "/flag",
        "/flag.txt",
        "/root/flag",
        "/root/flag.txt",
        0};

    for(int i=0;files[i];i++){
        int fd = open(files[i],0);
        if(fd&amp;gt;0){
            sendfile(1, fd, 0, 0x100);
        ...
    </summary>
  

  </entry>

  
  <entry>
    <title>2024-05-31-PHP-So-Pwn</title>
    <link href="http://localhost:4000/posts/PHP-So-Pwn/" rel="alternate" type="text/html" title="2024-05-31-PHP-So-Pwn" />
    <published>2024-05-31T00:00:00+08:00</published>
  
    <updated>2024-05-31T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/PHP-So-Pwn/</id>
    <content src="http://localhost:4000/posts/PHP-So-Pwn/" />
    <author>
      <name>imLZH1</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      ‍

基础的一些知识
‍


  
    最近打比赛 遇到了几道 php so 模块的 pwn 题，个人感觉挺有意思的
  
  
    一般情况下会把php 大部分函数 ban 掉，只是用 自定义so 文件里的函数
  


‍

.so 文件的导出函数

虽然里面函数名前面有zif_​ ,实际上调用的函数名是

add_chunk()
show_chunk()
edit_chunk()
edit_name()
free_chunk()


​​

‍

gdb调试方法(一种)


  可以先把本地的 gdbserver 上次到docker, 能正常运行就行了


​​


  我只开了一个 docker 环境，正常情况下，他的ip 就是 这个加1 ,也就是 172.17.0.2​


​​

​​


  然后用 gdbserver 启动


​​

​​


  上面是调试...
    </summary>
  

  </entry>

  
  <entry>
    <title>2024-03-05-GCC-CTF-Pwn_Writeups</title>
    <link href="http://localhost:4000/posts/GCC-CTF/" rel="alternate" type="text/html" title="2024-03-05-GCC-CTF-Pwn_Writeups" />
    <published>2024-03-07T00:00:00+08:00</published>
  
    <updated>2024-03-07T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/GCC-CTF/</id>
    <content src="http://localhost:4000/posts/GCC-CTF/" />
    <author>
      <name>imLZH1</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      2024-03-05-GCC-CTF

https://gcc-ctf.com/

就看看题

Flag_Roulette


  Description



  Are you tired of solving challs?

  Here, have a little break. If we win my game, I will give you a flag.

  I promise you I will not cheat :)

  The flag is in the /flag file.

  Author: 0xdeadbeef


‍


  
    Get

    
      ​_IO_2_1_stdout_​ 泄露地址
      ​mp_​ 结构题
      Attack tls_dtor_list​ 指针 ORW 利用
    
  

...
    </summary>
  

  </entry>

  
  <entry>
    <title>2024-SICTF Round#3-WriteUps_by_AhiSec</title>
    <link href="http://localhost:4000/posts/SICTF-Round-3-WriteUps_by_AhiSec/" rel="alternate" type="text/html" title="2024-SICTF Round#3-WriteUps_by_AhiSec" />
    <published>2024-02-16T18:42:08+08:00</published>
  
    <updated>2024-02-16T18:42:08+08:00</updated>
  
    <id>http://localhost:4000/posts/SICTF-Round-3-WriteUps_by_AhiSec/</id>
    <content src="http://localhost:4000/posts/SICTF-Round-3-WriteUps_by_AhiSec/" />
    <author>
      <name>imLZH1</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      
  感谢队友带我飞.


Reverse

Baby_C++

‍

1.签到题 shift + F12直接看见flag

​​

‍

Ez_pyc

‍

1.在线网址反编译不全，发现是3.8的python版本，直接使用3.8的uncompyle6反编译出源码

​​

2.一个数独游戏可以求解不过观察判断条件，发现如果数独正确输出的flag是正确flag的md5后的值提交一下发现flag就是那个md5 


​​

‍

ArtBreaker

‍


  比较抽象IDA打开发现节点过多修改节点个数限制，发现flag在流程图里面


​​

‍

‍

SweetTofu

‍


  简单的签到，主函数就是用户输入并且判断输入的长度是否大于0x100,调用v1这个函数指针加密直接打断点运行到v1指向的函数


​​

2.发现就是一个异或0x66而已

​​

3.解密得到...
    </summary>
  

  </entry>

</feed>


