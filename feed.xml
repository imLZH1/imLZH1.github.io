

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>imLZH1' Blog</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-05-31T11:46:11+08:00</updated>
  <author>
    <name>imLZH1</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="zh-CN"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator>
  <rights> © 2024 imLZH1 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>2024-05-31-PHP-So-Pwn</title>
    <link href="http://localhost:4000/posts/PHP-So-Pwn/" rel="alternate" type="text/html" title="2024-05-31-PHP-So-Pwn" />
    <published>2024-05-31T00:00:00+08:00</published>
  
    <updated>2024-05-31T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/PHP-So-Pwn/</id>
    <content src="http://localhost:4000/posts/PHP-So-Pwn/" />
    <author>
      <name>imLZH1</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      ‍

基础的一些知识
‍


  
    最近打比赛 遇到了几道 php so 模块的 pwn 题，个人感觉挺有意思的
  
  
    一般情况下会把php 大部分函数 ban 掉，只是用 自定义so 文件里的函数
  


‍

.so 文件的导出函数

虽然里面函数名前面有zif_​ ,实际上调用的函数名是

add_chunk()
show_chunk()
edit_chunk()
edit_name()
free_chunk()


​​

‍

gdb调试方法(一种)


  可以先把本地的 gdbserver 上次到docker, 能正常运行就行了


​​


  我只开了一个 docker 环境，正常情况下，他的ip 就是 这个加1 ,也就是 172.17.0.2​


​​

​​


  然后用 gdbserver 启动


​​

​​


  上面是调试...
    </summary>
  

  </entry>

  
  <entry>
    <title>2024-03-05-GCC-CTF-Pwn_Writeups</title>
    <link href="http://localhost:4000/posts/GCC-CTF/" rel="alternate" type="text/html" title="2024-03-05-GCC-CTF-Pwn_Writeups" />
    <published>2024-03-07T00:00:00+08:00</published>
  
    <updated>2024-03-07T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/GCC-CTF/</id>
    <content src="http://localhost:4000/posts/GCC-CTF/" />
    <author>
      <name>imLZH1</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      2024-03-05-GCC-CTF

https://gcc-ctf.com/

就看看题

Flag_Roulette


  Description



  Are you tired of solving challs?

  Here, have a little break. If we win my game, I will give you a flag.

  I promise you I will not cheat :)

  The flag is in the /flag file.

  Author: 0xdeadbeef


‍


  
    Get

    
      ​_IO_2_1_stdout_​ 泄露地址
      ​mp_​ 结构题
      Attack tls_dtor_list​ 指针 ORW 利用
    
  

...
    </summary>
  

  </entry>

  
  <entry>
    <title>2024-SICTF Round#3-WriteUps_by_AhiSec</title>
    <link href="http://localhost:4000/posts/SICTF-Round-3-WriteUps_by_AhiSec/" rel="alternate" type="text/html" title="2024-SICTF Round#3-WriteUps_by_AhiSec" />
    <published>2024-02-16T18:42:08+08:00</published>
  
    <updated>2024-02-16T18:42:08+08:00</updated>
  
    <id>http://localhost:4000/posts/SICTF-Round-3-WriteUps_by_AhiSec/</id>
    <content src="http://localhost:4000/posts/SICTF-Round-3-WriteUps_by_AhiSec/" />
    <author>
      <name>imLZH1</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      
  感谢队友带我飞.


Reverse

Baby_C++

‍

1.签到题 shift + F12直接看见flag

​​

‍

Ez_pyc

‍

1.在线网址反编译不全，发现是3.8的python版本，直接使用3.8的uncompyle6反编译出源码

​​

2.一个数独游戏可以求解不过观察判断条件，发现如果数独正确输出的flag是正确flag的md5后的值提交一下发现flag就是那个md5 


​​

‍

ArtBreaker

‍


  比较抽象IDA打开发现节点过多修改节点个数限制，发现flag在流程图里面


​​

‍

‍

SweetTofu

‍


  简单的签到，主函数就是用户输入并且判断输入的长度是否大于0x100,调用v1这个函数指针加密直接打断点运行到v1指向的函数


​​

2.发现就是一个异或0x66而已

​​

3.解密得到...
    </summary>
  

  </entry>

  
  <entry>
    <title>2023年春秋杯网络安全联赛冬季赛pwn方向houseofsome-WriteUps</title>
    <link href="http://localhost:4000/posts/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9Bpwn%E6%96%B9%E5%90%91houseofsome-WriteUps/" rel="alternate" type="text/html" title="2023年春秋杯网络安全联赛冬季赛pwn方向houseofsome-WriteUps" />
    <published>2024-01-26T00:00:00+08:00</published>
  
    <updated>2024-01-26T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9Bpwn%E6%96%B9%E5%90%91houseofsome-WriteUps/</id>
    <content src="http://localhost:4000/posts/2023%E5%B9%B4%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9Bpwn%E6%96%B9%E5%90%91houseofsome-WriteUps/" />
    <author>
      <name>imLZH1</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      ‍


  2023年春秋杯网络安全联赛冬季赛 ​pwn 方向 HouseofSome​ , 题解


‍

​​

‍

程序保护和沙箱

​​

​​

‍

菜单功能 泄露libc上的地址


  ​scannf("%ldd",&amp;amp;xx)​ 传入 -​ 后面报错 会给出 libc上的地址​


​​

‍

draw功能 任意地址写一个NULL 字节


  通过上面泄露的_IO_2_1_stdin_​地址，我就基本上可以利用 draw​ 功能在 libc可写的地方写入一个NULL字节，写到哪里呢？？


‍


  写 到 main_arena + 1 (add 一个堆块 保证 top_chunk 的低地址是 0x00)
  需要爆破一点 保证 heap 地址起始是 heap_base &amp;amp; 0xFFFF == 0x0000​​ ,然后攻击 main_arena+...
    </summary>
  

  </entry>

  
  <entry>
    <title>Announcements</title>
    <link href="http://localhost:4000/posts/Announcements/" rel="alternate" type="text/html" title="Announcements" />
    <published>2024-01-26T00:00:00+08:00</published>
  
    <updated>2024-01-26T00:00:00+08:00</updated>
  
    <id>http://localhost:4000/posts/Announcements/</id>
    <content src="http://localhost:4000/posts/Announcements/" />
    <author>
      <name>imLZH1</name>
    </author>

  
    
    <category term="CTF" />
    
  

  
    <summary>
      





      评论区


  🍎
  有什么想说的？


    </summary>
  

  </entry>

</feed>


